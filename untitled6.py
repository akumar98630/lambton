# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KNFyYC075Tm4AWvrQBmpgj2NhI0r-svd
"""

# Import necessary libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

#load dataset
df = pd.read_csv('glass.csv')

# Display first few rows
print("Sample Data:")
print(df.head())

# Check for missing values
print("\nMissing values:")
print(df.isnull().sum())

# Check data types
print("\nData Types:")
print(df.dtypes)

# Check for duplicate rows
print("\nDuplicate Rows:", df.duplicated().sum())

# Drop duplicates if any
df.drop_duplicates(inplace=True)

# Summary statistics
print("\nSummary Stats:")
print(df.describe())

# Correlation heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Matrix")
plt.show()

# Bar plot for target variable
plt.figure(figsize=(7, 5))
sns.countplot(x='Type', data=df)
plt.title("Glass Type Distribution")
plt.xlabel("Glass Type")
plt.ylabel("Count")
plt.show()

# Features and target
X = df.drop('Type', axis=1)
y = df['Type']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Model: Random Forest
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

# Predictions
y_pred = model.predict(X_test_scaled)

# Evaluation
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

print("Accuracy Score:", accuracy_score(y_test, y_pred))

# Confusion Matrix
conf_mat = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 5))
sns.heatmap(conf_mat, annot=True, fmt="d", cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

!pip install streamlit
import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Ensure the model and scaler are saved before trying to load them
joblib.dump(model, 'glass_model.pkl')
joblib.dump(scaler, 'scaler.pkl')

# Load the trained model and scaler
model = joblib.load('glass_model.pkl')
scaler = joblib.load('scaler.pkl')

st.set_page_config(page_title="Glass Type Classifier", layout="centered")
st.title("ðŸ”® Glass Type Prediction App")
st.write("Enter the chemical properties to predict the type of glass.")

# Feature input form
with st.form("glass_form"):
    RI = st.number_input("Refractive Index (RI)", min_value=1.4, max_value=1.6, step=0.001)
    Na = st.number_input("Sodium (Na)", min_value=0.0, max_value=20.0, step=0.1)
    Mg = st.number_input("Magnesium (Mg)", min_value=0.0, max_value=5.0, step=0.1)
    Al = st.number_input("Aluminum (Al)", min_value=0.0, max_value=5.0, step=0.1)
    Si = st.number_input("Silicon (Si)", min_value=60.0, max_value=75.0, step=0.1)
    K  = st.number_input("Potassium (K)", min_value=0.0, max_value=6.0, step=0.1)
    Ca = st.number_input("Calcium (Ca)", min_value=0.0, max_value=15.0, step=0.1)
    Ba = st.number_input("Barium (Ba)", min_value=0.0, max_value=3.0, step=0.1)
    Fe = st.number_input("Iron (Fe)", min_value=0.0, max_value=1.0, step=0.01)

    submit = st.form_submit_button("Predict Glass Type")

# Prediction
if submit:
    input_data = np.array([[RI, Na, Mg, Al, Si, K, Ca, Ba, Fe]])
    input_scaled = scaler.transform(input_data)
    prediction = model.predict(input_scaled)[0]

    glass_types = {
        1: "Building Windows (Float Process)",
        2: "Building Windows (Non Float Process)",
        3: "Vehicle Windows (Float Process)",
        4: "Vehicle Windows (Non Float Process)",
        5: "Containers",
        6: "Tableware",
        7: "Headlamps"
    }

    st.success(f"ðŸ”Ž Predicted Glass Type: **{glass_types.get(prediction, 'Unknown')}**")